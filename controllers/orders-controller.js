const { prisma } = require("../prisma/prisma-client");

const OrderController = {
  // üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  createOrder: async (req, res) => {
    try {
      const userId = req.user.userId;
      const { items } = req.body; // items: [{ productId, quantity }]

      if (!userId || !Array.isArray(items) || items.length === 0) {
        return res
          .status(400)
          .json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞" });
      }

      let totalPrice = 0;

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –∏—Ö –æ—Å—Ç–∞—Ç–∫–∏
      for (const item of items) {
        const product = await prisma.product.findUnique({
          where: { id: item.productId },
        });

        if (!product) {
          return res
            .status(404)
            .json({ error: `–¢–æ–≤–∞—Ä —Å ID ${item.productId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
        }

        if (product.quantity < item.quantity) {
          return res.status(400).json({
            error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ "${product.title}". –í –Ω–∞–ª–∏—á–∏–∏: ${product.quantity}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ: ${item.quantity}`,
          });
        }

        totalPrice += product.price * item.quantity;
      }

      // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
      const order = await prisma.order.create({
        data: {
          userId,
          totalPrice,
          status: "pending",
          items: {
            create: items.map(({ productId, quantity }) => ({
              productId,
              quantity,
            })),
          },
        },
        include: {
          items: true,
        },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
      for (const item of items) {
        await prisma.product.update({
          where: { id: item.productId },
          data: {
            quantity: {
              decrement: item.quantity,
            },
          },
        });
      }

      res.json(order);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error.message, error);
      res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑" });
    }
  },

  // ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  deleteOrder: async (req, res) => {
    try {
      const { id } = req.params;
      const userId = req.user.userId;

      // –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const order = await prisma.order.findUnique({
        where: { id },
        include: { items: true },
      });

      if (!order) {
        return res.status(404).json({ error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (order.userId !== userId) {
        return res
          .status(403)
          .json({ error: "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞" });
      }

      // –í–æ–∑–≤—Ä–∞—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
      for (const item of order.items) {
        await prisma.product.update({
          where: { id: item.productId },
          data: {
            quantity: {
              increment: item.quantity,
            },
          },
        });
      }

      // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      await prisma.orderItem.deleteMany({ where: { orderId: id } });

      // –£–¥–∞–ª–∏—Ç—å —Å–∞–º –∑–∞–∫–∞–∑
      await prisma.order.delete({ where: { id } });

      res.json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω", orderId: id });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error.message, error);
      res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑" });
    }
  },

  getUserOrders: async (req, res) => {
    try {
      const userId = req.user.userId;

      const orders = await prisma.order.findMany({
        where: { userId },
        include: {
          items: {
            include: {
              product: true,
            },
          },
        },
        orderBy: {
          createdAt: "desc",
        },
      });

      res.json(orders);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error.message, error);
      res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã" });
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –ø–æ ID
  getOrderById: async (req, res) => {
    try {
      const { id } = req.params;
      const userId = req.user.userId;

      const order = await prisma.order.findUnique({
        where: { id },
        include: {
          items: {
            include: {
              product: true,
            },
          },
        },
      });

      if (!order) {
        return res.status(404).json({ error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (order.userId !== userId) {
        return res
          .status(403)
          .json({ error: "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞" });
      }

      res.json(order);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø–æ ID:", error.message, error);
      res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑" });
    }
  },

  getAllOrders: async (req, res) => {
    try {
      const userId = req.user.userId;

      // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.findUnique({
        where: { id: userId },
      });

      if (!user || user.role !== "ADMIN") {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞." });
      }

      const orders = await prisma.order.findMany({
        include: {
          user: {
            select: {
              id: true,
              name: true,
              email: true,
            },
          },
          items: {
            include: {
              product: true,
            },
          },
        },
        orderBy: {
          createdAt: "desc",
        },
      });

      res.json(orders);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:", error.message, error);
      res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã" });
    }
  },

  getOrdersByUserId: async (req, res) => {
    try {
      const adminId = req.user.userId;
      const { userId } = req.params;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
      const admin = await prisma.user.findUnique({
        where: { id: adminId },
      });

      if (!admin || admin.role !== "ADMIN") {
        return res
          .status(403)
          .json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞." });
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const orders = await prisma.order.findMany({
        where: { userId },
        include: {
          user: {
            select: {
              id: true,
              name: true,
              email: true,
            },
          },
          items: {
            include: {
              product: true,
            },
          },
        },
        orderBy: {
          createdAt: "desc",
        },
      });

      res.json(orders);
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        error.message,
        error
      );
      res
        .status(500)
        .json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
  },
};

module.exports = OrderController;
