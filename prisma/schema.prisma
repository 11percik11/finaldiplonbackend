generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  password          String
  email             String     @unique
  role              UserRole   @default(CLIENT)
  name              String
  phone             String?
  avatarUrl         String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  refreshToken      String?     
  isActivated       Boolean    @default(false)
  activatedLink     String     @unique
  products          Product[]
  likes             Like[]
  comments          Comment[]
  chat              Chat[]
  UserChat          UserChat[]
  Message           Message[]
  cart              Cart[]
  purchasedProducts String[]   @db.ObjectId // üîπ –ú–∞—Å—Å–∏–≤ ID –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  orders            Order[] // üîπ –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–∞–º–∏
}

enum UserRole {
  ADMIN
  MANAGER
  CLIENT
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  avatarUrl   String?
  likes       Like[]
  comments    Comment[]
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  cartItems   CartItem[]
  createdAt   DateTime   @default(now())

  // üîΩ –ù–æ–≤—ã–µ –ø–æ–ª—è
  quantity Int     @default(1)
  color    String?
  sex      String? // –ù–∞–ø—Ä–∏–º–µ—Ä: "–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–£–Ω–∏—Å–µ–∫—Å"
  model    String?
  size     String? // –ü—Ä–∏–º–µ—Ä: "M", "L", "42", –∏ —Ç.–ø.
  age      String? // –ü—Ä–∏–º–µ—Ä: "–≤–∑—Ä–æ—Å–ª—ã–π", "–¥–µ—Ç—Å–∫–∏–π"

  orderItems OrderItem[]
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  visible   Boolean @default(false)
  createdAt DateTime @default(now())  // üîπ –ù–æ–≤–æ–µ –ø–æ–ª–µ
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}


model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
  totalPrice Float
  status     String // –ü—Ä–∏–º–µ—Ä: "pending", "shipped", "delivered"
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Chat {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  user      UserChat[]
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?    @db.ObjectId
}

model UserChat {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
  Chat   Chat?   @relation(fields: [chatId], references: [id])
  chatId String? @db.ObjectId
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    String?  @db.ObjectId
}
